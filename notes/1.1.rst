1.1 The Elements of programming
===============================

Every language has three mechanisms for combining simple ideas to form more complex ideas:

* primitive expressions, the simplest entities that the language is concerned with
* means of combination, used to build compound elements from simpler ones
* means of abstraction, used to name and manipulate compound elements as units

Data
  "Stuff" we want to manipulate
Procedures
  Descriptions of the rules for manipulating data, used as a pattern for
  the local evolution of a computational process

Declarative knowledge (what is true):
  It makes statements of facts (definitions)
Imperative knowledge (how-to)
  Tents to describe a sequence of steps that characterize the evolution of a process

.. list-table::

   * - Topic
     - Prerequisites
     - Lecture Slides
     - Lecture Videos

1.1.1 Expressions
~~~~~~~~~~~~~~~~~

.. code-block:: scheme

   (<operator> <operand1> <operand2> ...)

The value of a combination is obtained by applying the procedure specified by
the operator to the arguments (values of the operands). The operands can
themselves be combinations.

.. code-block:: scheme

   (+ 137 349 124)
   (+ (* 3 5) (- 10 6) (+ 7 4))

1.1.2 Naming and the Environment
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The name identifies a variable whose value is the object

Lisp uses ``define`` as the simplest mean of abstraction, the following associates
the value 2 to the name size:

.. code-block:: scheme

   (define size 2)

The memory where the interpreter keeps track of the name-object pairs is called the
global environment.

1.1.3 Evaluating Combinations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Evaluating a combination is recursive in nature, the procedure (the value of the leftmost
sub-expression which can be a primitive or compound procedure) is applied to
the value that results from evaluating the rest of the sub-expressions (operands) of the combination.

We can represent the combinations in the form of a tree where the value of the
operands percolate upwards.

.. code-block:: scheme

   (* (+ 2 (* 4 6)) (+ 3 5 7))

Exceptions to the general evaluation rule (such as define) are called special forms.

1.1.4 Compound Procedures
~~~~~~~~~~~~~~~~~~~~~~~~~

The following makes a procedure (with an argument named x that returns the result
of multiplying x by x) and gives it the name ``square``

.. code-block:: scheme

  (define square (lambda (x) (* x x)))

Can be written shortly as

.. code-block:: scheme

  (define (<name> <formal parameters>) <body>)
  (define (square x) (* x x))

1.1.5 The Substitution Model for Procedure Application
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When evaluating the body of a compound procedure, each parameter is replaced
by the corresponding argument, this is called the substitution model.

To evaluate a combination we must evaluate the operator to get the procedure to be applied,
and we must evaluate the operands to get the arguments.

Normal-order evaluation (expand then reduce)
  Substitute operand expressions for parameters until it obtained and expression
  involving only primitive operators, perform the evaluation

Applicative-order evaluation (evaluate arguments then apply)
  First evaluate the operator and operands and then apply the resulting
  procedure to the resulting arguments

Lisp uses applicative-order evaluation because:
  - it's more efficient (it avoids multiple evaluations of expressions)
  - normal-order evaluation becomes too complicated for procedures that cannot
    be modeled by substitution


.. code-block:: scheme

   (define (square x) (* x x))
   (define (sum-of-squares x y)
      (+ (square x) (square y)))
   (define (f a) (sum-of-squares (+ a 1) (* a 2)))

   (f 5)

   ; Normal-order evaluation:
   ;;
   ;; Substitute operand expressions for parameters until
   ;; we obtained an expression involving only primitive operations
   (sum-of-squares (+ 5 1) (* 5 2))
   (+ (square (+ 5 1)) (square (* 5 2)))
   (+ (* (+ 5 1) (+ 5 1)) (* (* 5 2) (* 5 2)))
   ;; Reduce expressions
   (+ (* 6 6) (* 10 10))
   (+ 36 100)
   136

   ; Applicative-order evaluation:
   ;;
   ;; Evaluate the subexpressions of the combinations
   ;; Apply the procedure to the arguments
   (sum-of-squares (+ 5 1) (* 5 2))
   (sum-of-squares 6 10)
   (+ (square 6) (square 10))
   (+ (* 6 6) (* 10 10)
   (+ 36 100)
   136

1.1.6 Conditional expressions and Predicates
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: scheme

   (if <predicate> <consequent> <alternative>)

   (cond (<predicate1> <consequent1>)
         (<predicate2> <consequent2>)
         (else <consequent3>))

- The predicate is evaluated
- If predicate value is false move to next predicate
- If predicate value is true return the value of consequent

Predicate: expression who's value is interpreted as either true of false
Else: special symbol, any expression that evaluates to true can be used instead
If: Restricted type of conditional with only two cases

1.1.8 Procedures as Black-Box Abstractions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Bound variable
  The name of a formal parameter of a procedure. The meaning of a procedure
  definition is unchanged if a bound variable is consistently renamed through
  the definition.

Free variable
  A variable that is not bound

The formal parameters of a procedure are local to the body of the procedure.

Nesting of definitions is called block structure.
